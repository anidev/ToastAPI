/**
Template file for classes using GradleRIO
@author Jaci
*/

buildscript {
  repositories {
	mavenCentral()
	maven {
		name = "GradleRIO"
		url = "http://dev.sourcecoded.info/jaci/maven"
	}
  }
  dependencies {
    classpath group: 'jaci.openrio.gradle', name: 'GradleRIO', version: '1.1.6'			//Change this line if you wish to Update GradleRIO
  }
}

apply plugin: 'GradleRIO'                                 //Apply the GradleRIO plugin
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: BuildGradle
apply plugin: 'maven'

gradlerio.robotClass = "jaci.openrio.toast.core.Toast"    //The class for the main Robot Class. Used in manifest
gradlerio.team = "5333"                                   //Your FRC team number (e.g. 5333 for team 'Can't C#', or 47 for Chief Delphi)
//gradlerio.rioIP = "10.53.33.20"                         //Uncomment to specify the IP address of the RIO

def maven = true

try {
  ext.mavenProps = file "../maven.properties"
  mavenProps.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.mavenProps = new ConfigSlurper().parse prop
  }
} catch (Exception e) {
  println "Could not load Maven Properties... You are not a developer!"
  maven = false
}

ext.settings = file "build.settings"
settings.withReader {
  def prop = new Properties()
  prop.load(it)
  project.ext.settings = new ConfigSlurper().parse prop
}


configurations {
    deployerJars
}

repositories {
    mavenCentral()
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.3.6'
  deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

archivesBaseName = "Toast"
version = settings.toast.version
group = "jaci.openrio.toast"

def robotManifest = {
  //attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
  attributes 'Main-Class': 'jaci.openrio.toast.core.ToastBootstrap'
  attributes 'Robot-Class': gradlerio.robotClass
}

jar.doFirst {
  from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  manifest robotManifest
}

task genJavadoc(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task genPatches << {
  try {
    ant.copy(todir: "build/resources/main/assets/toast/patches/") {
      ant.fileset(dir: "patches/build/patches")
    }
  } catch (Exception e) {}
}

task deletePatches << {
  try {
    ant.delete(includeemptydirs: "true") {
      ant.fileset(dir: "build/resources/main/assets/toast/patches/") {
        ant.include(name: "**/*")
        ant.exclude(name: "patches.txt")
      }
    }
  } catch (Exception e) {}
}

task updateLatest << {
  ant.delete(dir: "build/latest/")
  ant.copy(file: "${jar.archivePath}", todir: "build/latest")
}

genPatches.dependsOn deletePatches
compileJava.dependsOn genPatches
build.finalizedBy updateLatest

task src(type: Jar) {
  classifier = 'src'
  from sourceSets.main.allSource
}

task raw(type: Jar) {
  classifier = 'raw'
  from sourceSets.main.output
}

artifacts {
  //archives genJavadoc
  archives raw
}
uploadArchives {
  if (maven) {
    repositories.mavenDeployer {
      configuration = configurations.deployerJars
      repository(url: mavenProps.jaci.url) {
        authentication(userName: mavenProps.jaci.user, password: mavenProps.jaci.auth)
      }

      pom {
        groupId = project.group
              version = project.version
              artifactId = project.archivesBaseName
              project {
                  name project.archivesBaseName
                  packaging 'jar'
                  description 'Toast API Module Loader '
              }
      }
    }
  }
}

class BuildGradle implements Plugin<Project> {
  void apply(Project project) {
    project.task('release', dependsOn: 'build') << {
      ant.zip(destfile: "releases/Toast-${project.version}.zip",
        basedir: "release")
    }
  }
}
